license()
q()
library(dplyr)
library(tidyr)
library(ggplot2)
library(caret)
library(plotly)
library(mice)
# ...
#Exploratory Data Analysis, e.g., Distinguish Attributes, Univariate Analysis
# STEP0: Load the data
dataset <- read.csv("enron.csv")
setwd("~/GitHub/COMP7410")
hist(dataset$deferred_income)
dataset <- read.csv("enron.csv")
hist(dataset$deferred_income)
hist(dataset$deferred_income[abs(deferred_income)<5e6])
hist(dataset$restricted_stock_deferred)
hist(dataset$restricted_stock_deferred[dataset$restricted_stock < 0 & dataset$restricted_stock > -5e6])
hist(dataset$restricted_stock_deferred)
hist(dataset$restricted_stock_deferred[dataset$restricted_stock < 5e6 & dataset$restricted_stock > -1e7])
hist(dataset$restricted_stock_deferred)
View(dataset)
View(dataset)
hist(dataset$salary)
hist(dataset$bonus)
hist(dataset$total_stock_value)
hist(dataset$expenses)
hist(dataset$deferral_payments)
hist(dataset$deferred_income)
hist(dataset$restricted_stock_deferred)
hist(dataset$from_poi_to_this_person)
hist(dataset$from_this_person_to_poi)
hist(dataset$from_poi_to_this_person[dataset$from_poi_to_this_person < 100])
hist(dataset$from_this_person_to_poi[dataset$from_this_person_to_poi < 100])
hist(dataset$salary[dataset$salary < 5e6])
hist(dataset$bonus[dataset$bonus < 1e7])
hist(dataset$total_stock_value[dataset$total_stock_value < 5e7])
hist(dataset$expenses[dataset$expenses < 5e5])
hist(dataset$total_stock_value[dataset$total_stock_value < 5e6])
hist(dataset$deferral_payments[dataset$deferral_payments < 5e6])
hist(dataset$deferred_income[dataset$deferred_income > -5e6])
hist(dataset$restricted_stock_deferred[dataset$restricted_stock_deferred > -5e6 & dataset$restricted_stock_deferred < 0])
ggplot(dataset, aes(x = factor(poi))) +
geom_bar()
ggplot(dataset, aes(x = factor(poi),
y = prop.table(stat(count)), fill = factor(poi),
label = scales::percent((prop.table(stat(count)))))) +
geom_bar(position="dodge") +
geom_text(stat = 'count',
position = position_dodge(.9),
vjust = -0.5,
size = 3) +
scale_x_discrete(labels = c("False", "True")) +
scale_y_continuous(labels = scales::percent) +
labs(x = "Poi", y = "Percentage") +
ggtitle("Distribution of POI status")
ggplot(dataset, aes(y = expenses)) +
geom_boxplot() +
labs(x = "Frequency", y = "Expenses") +
ggtitle("Boxplot of expenses by frequency")
ggplot(dataset, aes(y = from_poi_to_this_person)) +
geom_boxplot() +
labs(x = "Frequency", y = "from_poi_to_this_person") +
ggtitle("Boxplot of from_poi_to_this_person by frequency")
# Box plot for from this person to poi
ggplot(dataset, aes(y = from_this_person_to_poi)) +
geom_boxplot() +
labs(x = "Frequency", y = "from_this_person_to_poi") +
ggtitle("Boxplot of from_this_person_to_poi by frequency")
View(dataset)
# Box plot for salary
ggplot(dataset, aes(y = salary)) +
geom_boxplot() +
labs(x = "Frequency", y = "salary") +
ggtitle("Boxplot of salary by frequency")
# Box plot for bonus
ggplot(dataset, aes(y = bonus)) +
geom_boxplot() +
labs(x = "Frequency", y = "bonus") +
ggtitle("Boxplot of bonus by frequency")
# Box plot for total stock value
ggplot(dataset, aes(y = total_stock_value)) +
geom_boxplot() +
labs(x = "Frequency", y = "total_stock_value") +
ggtitle("Boxplot of total_stock_value by frequency")
# Box plot for expenses
ggplot(dataset, aes(y = expenses)) +
geom_boxplot() +
labs(x = "Frequency", y = "Expenses") +
ggtitle("Boxplot of expenses by frequency")
# Box plot for deferral_payments
ggplot(dataset, aes(y = deferral_payments)) +
geom_boxplot() +
labs(x = "Frequency", y = "deferral_payments") +
ggtitle("Boxplot of deferral_payments by frequency")
# Box plot for deferred_income
ggplot(dataset, aes(y = deferred_income)) +
geom_boxplot() +
labs(x = "Frequency", y = "deferred_income") +
ggtitle("Boxplot of deferred_income by frequency")
# Box plot for restricted_stock_deferred
ggplot(dataset, aes(y = restricted_stock_deferred)) +
geom_boxplot() +
labs(x = "Frequency", y = "restricted_stock_deferred") +
ggtitle("Boxplot of restricted_stock_deferred by frequency")
ggplot(dataset, aes(x = salary, fill = factor(poi))) +
geom_histogram(bins = 100) +
labs(x = 'salary', y = 'salary') +
ggtitle('Distribution of by poi') +
facet_grid(poi ~ ., scales = 'free_y')
ggplot(dataset, aes(x = salary, fill = factor(poi))) +
geom_histogram(bins = 100) +
labs(x = 'salary', y = '# of the salary') +
ggtitle('Distribution of by poi') +
facet_grid(poi ~ ., scales = 'free_y')
ggplot(dataset, aes(x = from_poi_to_this_person, fill = factor(poi))) +
geom_histogram(bins = 100) +
labs(x = 'from_poi_to_this_person', y = '# of the from_poi_to_this_person') +
ggtitle('Distribution of by poi') +
facet_grid(poi ~ ., scales = 'free_y')
ggplot(dataset, aes(x = from_this_person_to_poi, fill = factor(poi))) +
geom_histogram(bins = 100) +
labs(x = 'amount of from_this_person_to_poi', y = 'frequency') +
ggtitle('Distribution of by poi') +
facet_grid(poi ~ ., scales = 'free_y')
ggplot(dataset, aes(x = from_poi_to_this_person, fill = factor(poi))) +
geom_histogram(bins = 100) +
labs(x = 'amount of from_poi_to_this_person', y = 'frequency') +
ggtitle('Distribution of by poi') +
facet_grid(poi ~ ., scales = 'free_y')
ggplot(dataset, aes(x = from_this_person_to_poi, fill = factor(poi))) +
geom_histogram(bins = 100) +
labs(x = 'amount of from_this_person_to_poi', y = 'frequency') +
ggtitle('Distribution of by poi') +
facet_grid(poi ~ ., scales = 'free_y')
ggplot(dataset, aes(x = bonus, fill = factor(poi))) +
geom_histogram(bins = 100) +
labs(x = 'bonus value', y = 'frequency') +
ggtitle('Distribution of by poi') +
facet_grid(poi ~ ., scales = 'free_y')
ggplot(dataset, aes(x = salary, fill = factor(poi))) +
geom_histogram(bins = 100) +
labs(x = 'salary', y = 'frequency') +
ggtitle('Distribution of salary by poi') +
facet_grid(poi ~ ., scales = 'free_y')
ggplot(dataset, aes(x = total_stock_value, fill = factor(poi))) +
geom_histogram(bins = 100) +
labs(x = 'total_stock_value value', y = 'frequency') +
ggtitle('Distribution of total_stock_value by poi') +
facet_grid(poi ~ ., scales = 'free_y')
ggplot(dataset, aes(x = expenses, fill = factor(poi))) +
geom_histogram(bins = 100) +
labs(x = 'expenses value', y = 'frequency') +
ggtitle('Distribution of expenses by poi') +
facet_grid(poi ~ ., scales = 'free_y')
View(dataset)
# [deferral_payments]
ggplot(dataset, aes(x = deferral_payments, fill = factor(poi))) +
geom_histogram(bins = 100) +
labs(x = 'deferral_payments value', y = 'frequency') +
ggtitle('Distribution of deferral_payments by poi') +
facet_grid(poi ~ ., scales = 'free_y')
# [deferred_income]
ggplot(dataset, aes(x = deferred_income, fill = factor(poi))) +
geom_histogram(bins = 100) +
labs(x = 'deferred_income value', y = 'frequency') +
ggtitle('Distribution of deferred_income by poi') +
facet_grid(poi ~ ., scales = 'free_y')
# [restricted_stock_deferred]
ggplot(dataset, aes(x = restricted_stock_deferred, fill = factor(poi))) +
geom_histogram(bins = 100) +
labs(x = 'restricted_stock_deferred value', y = 'frequency') +
ggtitle('Distribution of restricted_stock_deferred by poi') +
facet_grid(poi ~ ., scales = 'free_y')
corr_mat <- cor(dataset)
corr_mat <- cor(dataset$from_poi_to_this_person, dataset$total_stock_value)
corrplot(corr_mat, method = 'number')
corrplot(corr_mat, method="number")
install.packages("corrplot")
library(corrplot)
corrplot(corr_mat, method="number")
corr_mat <- cor(dataset$from_poi_to_this_person, dataset$total_stock_value)
corrplot(corr_mat, method="number")
print(corr_mat)
corr_mat <- cor(dataset$from_poi_to_this_person, dataset$total_stock_value, use = "everything", method = "pearson")
print(corr_mat)
corrplot(corr_mat, method="number")
corr_mat <- cor(dataset$from_poi_to_this_person, dataset$total_stock_value, use = "complete.obs", method = "pearson")
print(corr_mat)
corrplot(corr_mat, method="number")
corr_mat <- cor(dataset, use = "complete.obs", method = "pearson")
corr_mat <- cor(dataset[, c("from_poi_to_this_person", "total_stock_value")], use = "complete.obs", method = "pearson")
print(corr_mat)
corrplot(corr_mat, method="number")
corr_mat <- cor(dataset, use = "complete.obs")
selected_features <- dataset[, c("from_poi_to_this_person", "total_stock_value", "deferral_payments", "deferred_income", "restricted_stock_deferred")]
corr_mat <- cor(selected_features, use = "complete.obs", method = "pearson")
corrplot(corr_mat, method="number")
corrplot(corr_mat, method="color")
View(selected_features)
View(dataset)
# Since the restricted_stock_deferred consists of too many NaNs, we could remove this feature and see the correlation matrix.
selected_features <- dataset[, c("from_poi_to_this_person", "total_stock_value", "deferral_payments", "deferred_income")]
corr_mat <- cor(selected_features, use = "complete.obs", method = "pearson")
corrplot(corr_mat, method="number")
corrplot(corr_mat, method="color")
selected_features <- dataset[, c("from_poi_to_this_person", "total_stock_value", "deferral_payments", "deferred_income", "restricted_stock_deferred")]
corr_mat <- cor(selected_features, use = "complete.obs", method = "pearson")
corrplot(corr_mat, method="number")
corrplot(corr_mat, method="")
selected_features_without_restricted_stocks <- dataset[, c("from_poi_to_this_person", "total_stock_value", "deferral_payments", "deferred_income")]
corr_mat <- cor(selected_features, use = "complete.obs", method = "pearson")
corrplot(corr_mat, method="number")
corrplot(corr_mat, method="color")
selected_features <- dataset[, c("from_poi_to_this_person", "total_stock_value", "deferral_payments", "deferred_income", "restricted_stock_deferred")]
corr_mat <- cor(selected_features, use = "complete.obs", method = "pearson")
corrplot(corr_mat, method="number")
corrplot(corr_mat, method="color")
# Since the restricted_stock_deferred consists of too many NaNs, we could remove this feature and see the correlation matrix.
selected_features_without_restricted_stocks <- dataset[, c("from_poi_to_this_person", "total_stock_value", "deferral_payments", "deferred_income")]
corr_mat <- cor(selected_features, use = "complete.obs", method = "pearson")
corrplot(corr_mat, method="number")
corrplot(corr_mat, method="color")
View(selected_features)
View(selected_features)
numeric_vars <- dataset %>% select_if(is.numeric)
numeric_vars <- dataset %>% select_if(is.numeric)
corr_mat <- cor(numeric_vars, use = "complete.obs", method = "pearson")
imp <- mice(dataset)
View(numeric_vars)
View(numeric_vars)
imp <- mice(numeric_vars)
View(numeric_vars)
View(numeric_vars)
missing_data <- is.na(dataset)
ggplot(missing_data, aes(x = factor(1), y = factor(1))) +
geom_tile(aes(fill = missing_data), width = 1, height = 1) +
scale_fill_manual(values = c("TRUE" = "red", "FALSE" = "white"), guide = FALSE) +
labs(x = "Variables", y = "Observations") +
theme_minimal()
View(missing_data)
missing_data <- is.na(dataset)
missing_data <- melt(missing_data)
install.packages("reshape2")
install.packages("reshape2")
library(reshape2)
missing_data <- is.na(dataset)
missing_data <- melt(missing_data)
ggplot(missing_data, aes(x = factor(1), y = factor(1))) +
geom_tile(aes(fill = missing_data), width = 1, height = 1) +
scale_fill_manual(values = c("TRUE" = "red", "FALSE" = "white"), guide = FALSE) +
labs(x = "Variables", y = "Observations") +
theme_minimal()
library(dplyr)
library(tidyr)
library(ggplot2)
library(caret)
library(plotly)
library(mice)
library(corrplot)
library(reshape2)
missing_data <- is.na(dataset)
missing_data <- melt(missing_data)
ggplot(missing_data, aes(x = factor(1), y = factor(1))) +
geom_tile(aes(fill = missing_data), width = 1, height = 1) +
scale_fill_manual(values = c("TRUE" = "red", "FALSE" = "white"), guide = FALSE) +
labs(x = "Variables", y = "Observations") +
theme_minimal()
# 计算每个变量的缺失值比例
missing_percent <- colMeans(is.na(dataset)) * 100
# 创建缺失值直方图
ggplot(dataset.frame(variable = names(dataset), missing_percent), aes(x = variable, y = missing_percent)) +
geom_bar(stat = "identity", fill = "blue", width = 0.5) +
labs(x = "Variables", y = "Missing Value Percentage") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
coord_cartesian(ylim = c(0, 100))
missing_percent <- colMeans(is.na(dataset)) * 100
# 创建缺失值直方图
ggplot(data.frame(variable = names(dataset), missing_percent), aes(x = variable, y = missing_percent)) +
geom_bar(stat = "identity", fill = "blue", width = 0.5) +
labs(x = "Variables", y = "Missing Value Percentage") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
coord_cartesian(ylim = c(0, 100))
q3 <- quantile(dataset$salary, probs = 0.75)
# Compute IQR
q3 <- quantile(dataset$salary, probs = 0.75, na.rm = TRUE) # Ignore NA values
q1 <- quantile(data$salary, probs = 0.25, na.rm = TRUE)
q3 <- quantile(dataset$salary, probs = 0.75, na.rm = TRUE) # Ignore NA values
q1 <- quantile(dataset$salary, probs = 0.25, na.rm = TRUE)
iqr <- q3 - q1
print(iqr)
q3 <- quantile(dataset$salary, probs = 0.75, na.rm = TRUE) # Ignore NA values
q1 <- quantile(dataset$salary, probs = 0.25, na.rm = TRUE)
iqr <- q3 - q1
print(iqr)
threshold <- 1.5 * iqr
lower_bound <- q1 - threshold
upper_bound <- q3 + threshold
outliers <- dataset$salary[dataset$salary < lower_bound | dataset$salary > upper_bound]
print(outliers)
View(dataset)
str(dataset)
summary(dataset)
table(dataset$poi)
table(dataset$poi)/length(dataset$poi)
q3 <- quantile(dataset$salary, probs = 0.75, na.rm = TRUE) # Ignore NA values
q1 <- quantile(dataset$salary, probs = 0.25, na.rm = TRUE)
iqr <- q3 - q1
print(iqr)
threshold <- 1.5 * iqr
lower_bound <- q1 - threshold
upper_bound <- q3 + threshold
outliers <- dataset$salary[dataset$salary < lower_bound | dataset$salary > upper_bound]
print(outliers)
summary(dataset)
summary(dataset)
summary(dataset)
hist(dataset$total_stock_value)
hist(dataset$deferred_income)
hist(dataset$restricted_stock_deferred)
hist(dataset$restricted_stock_deferred[dataset$restricted_stock_deferred > -5e6 & dataset$restricted_stock_deferred < 0])
hist(dataset$total_stock_value[dataset$total_stock_value < 5e6])
hist(dataset$total_stock_value)
ggplot(dataset, aes(x = factor(poi),
y = prop.table(stat(count)), fill = factor(poi),
label = scales::percent((prop.table(stat(count)))))) +
geom_bar(position="dodge") +
geom_text(stat = 'count',
position = position_dodge(.9),
vjust = -0.5,
size = 3) +
scale_x_discrete(labels = c("False", "True")) +
scale_y_continuous(labels = scales::percent) +
labs(x = "Poi", y = "Percentage") +
ggtitle("Distribution of POI status")
# Box plot for salary
ggplot(dataset, aes(y = salary)) +
geom_boxplot() +
labs(x = "Frequency", y = "salary") +
ggtitle("Boxplot of salary by frequency")
